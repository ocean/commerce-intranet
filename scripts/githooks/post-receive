#!/bin/bash
set -o errtrace
trap 'onerr' ERR
onerr(){ while caller $((n++)); do :; done; }

# Revised by: Drew Robinson <drew.robinson@gmail.com>

# Original author: "FRITZ Thomas" <fritztho@gmail.com> (http://www.fritzthomas.com)
# GitHub: https://gist.github.com/thomasfr/9691385
#
# The MIT License (MIT)
#
# Copyright (c) 2014-2015 FRITZ Thomas
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

if [ "$GIT_DIR" = "." ]; then
  # The script has been called as a hook; chdir to the working copy
  cd ..
  unset GIT_DIR
fi

# git="$(which git)"

# get the current branch
# head="$($git symbolic-ref HEAD)"
# echo "head is ${head}"

# When receiving a new git push, the received branch gets compared to this one.
# If you do not need this, just add a comment
export deploy_allowed_branch="master"

# Set up logfile to log deployment script runs.
logfile=log/deploy.log
if [ ! -f "log/deploy.log" ]; then
  mkdir -p log
  chmod 0775 log
  touch $logfile
  chmod 0664 $logfile
fi

# Run this script in the repo to fire off the actual work
after_push_cmd='scripts/deploy.sh'

###########################################################################################

ip="$(hostname -i | cut -f1 -d ' ')"

echo "$(tput -Tansi setaf 0)$(tput -Tansi setab 6)githook:$(tput -Tansi sgr 0) $(date): Welcome to '$(hostname -f)' (${ip})"
echo

# Loop, because it is possible to push more than one branch at a time. (git push --all)
while read -r oldrev newrev refname
do
  # abort if there's no update, or in case the branch is deleted
  if [ -z "${newrev//0}" ]; then
    exit
  fi

  if [ -z "${oldrev//0}" ]; then
    # this is the first push; this branch was just created
    mkdir -p log
    chmod 0775 log
    touch $logfile
    chmod 0664 $logfile
  fi

  deploy_branch=$(git rev-parse --symbolic --abbrev-ref "$refname")
  export deploy_branch
  export deploy_oldrev="$oldrev"
  export deploy_newrev="$newrev"
  export deploy_refname="$refname"

  if [ ! -z "${deploy_allowed_branch}" ]; then
    if [ "${deploy_allowed_branch}" != "$deploy_branch" ]; then
      echo "$(tput -Tansi setaf 0)$(tput -Tansi setab 6)githook:$(tput -Tansi sgr 0) Branch '$deploy_branch' will not be deployed. Exiting."
      exit 1
    fi
  fi

  git checkout -f "${deploy_branch}" || exit 1
  git reset --hard "$deploy_newrev" || exit 1

  # log timestamp
  echo ==== "$(date)" ==== >> $logfile

  if [ ! -z "${after_push_cmd}" ]; then
    echo
    echo "$(tput -Tansi setaf 0)$(tput -Tansi setab 6)githook:$(tput -Tansi sgr 0) AFTER PUSH (CMD: '${after_push_cmd}'):"
    # shellcheck disable=SC2086
    $after_push_cmd $oldrev $newrev $refname 2>&1 | tee -a $logfile || exit 1
  fi

done

echo
echo "$(tput -Tansi setaf 0)$(tput -Tansi setab 6)githook:$(tput -Tansi sgr 0) $(date): See you soon at '$(hostname -f)' (${ip})"
exit 0
