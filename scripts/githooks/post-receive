#!/bin/bash
set -o errtrace
trap 'onerr' ERR
onerr(){ while caller $((n++)); do :; done; }

# Revised by: Drew Robinson <drew.robinson@gmail.com>

# Original author: "FRITZ Thomas" <fritztho@gmail.com> (http://www.fritzthomas.com)
# GitHub: https://gist.github.com/thomasfr/9691385
#
# The MIT License (MIT)
#
# Copyright (c) 2014-2015 FRITZ Thomas
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

if [ "$GIT_DIR" = "." ]; then
  # The script has been called as a hook; chdir to the working copy
  cd ..
  unset GIT_DIR
fi

git="$(which git)"

# get the current branch
head="$($git symbolic-ref HEAD)"

# echo "head is ${head}"

# When receiving a new git push, the received branch gets compared to this one.
# If you do not need this, just add a comment
export DEPLOY_ALLOWED_BRANCH="master"

# Set up logfile to log deployment script runs.
logfile=log/deploy.log
if [ ! -f "log/deploy.log" ]; then
  mkdir -p log
  chmod 0775 log
  touch $logfile
  chmod 0664 $logfile
fi

# Run this script in the repo to fire off the actual work
AFTER_PUSH_CMD='scripts/deploy.sh'

###########################################################################################

echo "pwd is $(pwd)"
echo "who am i = $(whoami)"
echo "ifconfig = $(ifconfig)"

# IP="$(ip addr show eth0 | grep 'inet ' | cut -f2 | awk '{ print $2}')"
IP="$(ip addr show | grep -A 2 eno | grep 'inet ' | cut -f2 | awk '{print $2}' | cut -d '/' -f1)"

echo "githook: $(date): Welcome to '$(hostname -f)' (${IP})"
echo

# Loop, because it is possible to push more than one branch at a time. (git push --all)
while read oldrev newrev refname
do
  # abort if there's no update, or in case the branch is deleted
  if [ -z "${newrev//0}" ]; then
    exit
  fi

  if [ -z "${oldrev//0}" ]; then
    # this is the first push; this branch was just created
    mkdir -p log
    chmod 0775 log
    touch $logfile
    chmod 0664 $logfile
  fi

  export DEPLOY_BRANCH=$(git rev-parse --symbolic --abbrev-ref $refname)
  export DEPLOY_OLDREV="$oldrev"
  export DEPLOY_NEWREV="$newrev"
  export DEPLOY_REFNAME="$refname"

  if [ ! -z "${DEPLOY_ALLOWED_BRANCH}" ]; then
    if [ "${DEPLOY_ALLOWED_BRANCH}" != "$DEPLOY_BRANCH" ]; then
      echo "githook: Branch '$DEPLOY_BRANCH' will not be deployed. Exiting."
      exit 1
    fi
  fi

  # Make sure GIT_DIR and GIT_WORK_TREE is correctly set and 'export'ed. Otherwhise
  # these two environment variables could also be passed as parameters to the git cli
  # echo "githook: I will deploy '${DEPLOY_BRANCH}' branch of the '${DEPLOY_APP_NAME}' project to '${DEPLOY_ROOT}'"
  git checkout -f "${DEPLOY_BRANCH}" || exit 1
  git reset --hard "$DEPLOY_NEWREV" || exit 1

  # log timestamp
  echo ==== $(date) ==== >> $logfile

  if [ ! -z "${AFTER_PUSH_CMD}" ]; then
    echo
    echo "githook: AFTER PUSH (CMD: '${AFTER_PUSH_CMD}'):"
    # eval $AFTER_PUSH_CMD || exit 1
    $AFTER_PUSH_CMD $oldrev $newrev $refname 2>&1 | tee -a $logfile || exit 1
  fi

done

echo
echo "githook: $(date): See you soon at '$(hostname -f)' (${IP})"
exit 0
