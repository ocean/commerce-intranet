---
- hosts: localhost

  # To be run as "admin", so no need for escalation
  # become: true
  # become_method: sudo

  # Most should be set already
  # environment:
    # - http_proxy: blah

  vars:
    theme_build_directory: "web/themes/custom/intranet"
    drupal_app_root_directory: "/opt/app/html/intranet"
    drupal_web_root_directory: "/opt/app/html/intranet/web"

  # Not needed yet
  # roles:
    # - { role: common, tags: ["common"] }

  # Ok, we are going to deploy this thing
  tasks:
    - debug: var=git_new_revision
    - debug: var=git_drupal_repo_directory
    - name: Counting how many files have changed
      shell: |
        `which git` diff {{ git_old_revision }} {{ git_new_revision }} --diff-filter=ACDMR --name-only | wc -l
      register: git_number_of_files_changed
    - debug: var=git_number_of_files_changed
    - debug:
        msg: Files changed{{':'}} {{ git_number_of_files_changed.stdout }}
    - name: Checking if theme code needs rebuilding
      shell: |
        `which git` diff {{ git_old_revision }} {{ git_new_revision }} --name-only | grep 'web\/themes\/custom' | wc -l
      register: git_number_of_theme_files_changed
    - name: Checking if Drupal code has changed and update needs running
      shell: |
        `which git` diff {{ git_old_revision }} {{ git_new_revision }} --name-only | grep -E -v 'web\/themes\/custom|tests|scripts' | wc -l
      register: git_number_of_code_files_changed
    - name: Turning on Drupal maintenance mode
      shell: drush sset system.maintenance_mode 1
      args:
        chdir: "{{ drupal_web_root_directory }}"
      when: git_number_of_code_files_changed > 0
    - name: Rsyncing code changes into Drupal app root directory
      synchronize:
        src: "{{ git_drupal_repo_directory }}"
        dest: "{{ drupal_web_root_directory }}"
        rsync_opts:
          - "--dry-run"
          - "--verbose"
      delegate_to: "{{ inventory_hostname }}"
    # - name: Check current directory
    #   command: pwd
    #   register: directory_listing
    # - debug: var=directory_listing
    # - name: Run hi there
    #   command: echo "hi there"
    #   when: directory_listing.stdout.find('composer') != -1

  handlers:
    # - name: restart mysqld
    #   service: name=mysqld state=restarted
    # - name: restart httpd
    #   service: name=httpd state=restarted
