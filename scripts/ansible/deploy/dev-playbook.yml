---
- hosts: localhost

  # To be run as "admin", so no need for escalation
  # become: true
  # become_method: sudo

  # Stupid proxies
  environment:
    - http_proxy: http://proxy.bedrock.mft.wa.gov.au:8080
    - https_proxy: https://proxy.bedrock.mft.wa.gov.au:8080
    - no_proxy: "localhost,127.0.0.1,10.*,*.commerce.wa.gov.au,*.bedrock.mft.wa.gov.au"
    - HTTP_PROXY: http://proxy.bedrock.mft.wa.gov.au:8080
    - HTTPS_PROXY: https://proxy.bedrock.mft.wa.gov.au:8080
    - NO_PROXY: "localhost,127.0.0.1,10.*,*.commerce.wa.gov.au,*.bedrock.mft.wa.gov.au"

  vars:
    theme_build_directory: "web/themes/custom/intranet"
    drupal_app_root_directory: "/opt/app/html/intranet"
    drupal_web_root_directory: "/opt/app/html/intranet/web"

  # Not needed yet
  # roles:
    # - { role: common, tags: ["common"] }

  # Ok, we are going to deploy this thing
  tasks:
    - debug: var=git_new_revision
    - debug: var=git_drupal_repo_directory
    - name: Counting how many files have changed
      shell: |
        `which git` diff {{ git_old_revision }} {{ git_new_revision }} --diff-filter=ACDMR --name-only | wc -l
      register: git_number_of_files_changed
      changed_when: git_number_of_files_changed.stdout|int > 0
    # - debug: var=git_number_of_files_changed
    - debug:
        msg: Files changed{{':'}} {{ git_number_of_files_changed.stdout }}
    - name: Checking if theme code needs rebuilding
      shell: |
        `which git` diff {{ git_old_revision }} {{ git_new_revision }} --name-only | grep 'web\/themes' | wc -l
      register: git_number_of_theme_files_changed
      changed_when: git_number_of_theme_files_changed.stdout|int > 0
    - name: Checking if Drupal code has changed and update needs running
      shell: |
        `which git` diff {{ git_old_revision }} {{ git_new_revision }} --name-only | grep -E -v 'web\/themes|tests|scripts' | wc -l
      register: git_number_of_code_files_changed
      changed_when: git_number_of_code_files_changed.stdout|int > 0
    # - name: Running some test commands
    #   shell: "env && whoami && pwd"
    # - name: Running Composer update to update composer.lock from composer.json
    #   shell: composer update --no-interaction --no-progress --no-suggest
    #   # when: git_number_of_code_files_changed.stdout|int > 0
    #   register: composer_update_run
    #   changed_when: composer_update_run.stderr.find('Nothing to install or update') == -1
    - name: Running Composer install to install changed modules from composer.lock
      shell: composer install --no-interaction --no-progress --no-suggest
      # when: git_number_of_code_files_changed.stdout|int > 0
      register: composer_install_run
      changed_when: composer_install_run.stderr.find('Nothing to install or update') == -1
    # - name: Ensure permissions are correct on web root
    #   file: path={{ drupal_app_root_directory }} state=directory recurse=yes owner=apache group=apache mode="ug+rw"
    #   become: true
    #   become_method: su
    #   register: permission_update
    # - debug: var=permission_update
    # - name: Turning on Drupal maintenance mode
    #   shell: drush sset system.maintenance_mode 1
    #   args:
    #     chdir: "{{ drupal_web_root_directory }}"
    #   when: git_number_of_code_files_changed.stdout|int > 0
    #   register: drupal_maintenance_on_run
    #   changed_when: drupal_maintenance_on_run.stdout != ''
    - name: Rsyncing code changes into Drupal app root directory
      synchronize:
        src: "{{ git_drupal_repo_directory }}/"
        dest: "{{ drupal_app_root_directory }}/"
        archive: no
        links: yes
        recursive: yes
        # times: yes
        rsync_opts:
          - "--checksum"
          - "--exclude-from=scripts/ansible/deploy/rsync-excludes"
          - "--verbose"
          - "--itemize-changes"
          - "--log-file=log/rsync-output.log"
          # - "--delete"
          # - "--dry-run"
      delegate_to: "{{ inventory_hostname }}"
    # - name: Ensure ownership is correct on web root
    #   file: path={{ drupal_app_root_directory }} state=directory recurse=yes owner=apache group=apache
    #   become: true
    #   become_method: sudo
    #   register: permission_update
    # - debug: var=permission_update
    - name: Running Drupal update scripts
      shell: drush updatedb -y
      args:
        chdir: "{{ drupal_web_root_directory }}"
      when: git_number_of_code_files_changed.stdout|int > 0
      register: drupal_update_scripts_run
      changed_when: drupal_update_scripts_run.stderr.find('No database updates required') == -1
    # - name: Rebuilding Drupal caches
    #   shell: drush cache-rebuild
    #   args:
    #     chdir: "{{ drupal_web_root_directory }}"
    #   when: git_number_of_files_changed.stdout|int > 0
    #   register: drush_cache_rebuild_run
    #   changed_when: "'Cache rebuild complete' not in drush_cache_rebuild_run.stderr"
    # - name: Turning off Drupal maintenance mode
    #   shell: drush sset system.maintenance_mode 0
    #   args:
    #     chdir: "{{ drupal_web_root_directory }}"
    #   when: git_number_of_code_files_changed.stdout|int > 0
    #   register: drupal_maintenance_off_run
    #   changed_when: drupal_maintenance_off_run.stdout != ''
    # - name: Check current directory
    #   command: pwd
    #   register: directory_listing
    # - debug: var=directory_listing
    # - name: Run hi there
    #   command: echo "hi there"
    #   when: directory_listing.stdout.find('composer') != -1

  handlers:
    # - name: restart mysqld
    #   service: name=mysqld state=restarted
    # - name: restart httpd
    #   service: name=httpd state=restarted
